from _typeshed import Incomplete
from mbodied.agents.motion.motor_agent import MotorAgent as MotorAgent
from mbodied.types.motion.control import HandControl as HandControl, Motion as Motion
from mbodied.types.sense.vision import Image as Image

class OpenVlaAgent(MotorAgent):
    '''OpenVLA agent to generate robot actions.

    Specify gradio server endpoint in model_src to make inference via API.
    See openvla_example_server.py for the an exmaple of the gradio server code.

    `actor` is a gradio server taking: image, instruction, and unnorm_key as input.

    Example:
        >>> openvla_agent = OpenVlaAgent(model_src="https://api.mbodi.ai/community-models/")
        >>> openvla.act("move hand forward", Image(size=(224, 224)))
        HandControl(pose=Pose6D(x=1,y=2,z=3,roll=0,pitch=0,yaw=0), grasp=JointControl(value=0))
    '''
    def __init__(self, recorder: str = 'omit', recorder_kwargs: Incomplete | None = None, model_src: Incomplete | None = None, model_kwargs: Incomplete | None = None, **kwargs) -> None: ...
    def act(self, instruction: str, image: Image, unnorm_key: str = 'bridge_orig') -> Motion:
        """Act based on the instruction and image using the remote server.

        Args:
            instruction (str): The instruction to act on.
            image (Image): The image to act on.
            unnorm_key (str): The key for the unnormalized image.

        Returns:
            Motion: The HandControl generated by the agent.
        """
