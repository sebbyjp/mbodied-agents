import _abc
import inspect
import mbodied.types.sample
import pydantic._internal._decorators
import pydantic_core._pydantic_core
from _typeshed import Incomplete
from mbodied.types.geometry import Pose as Pose
from mbodied.types.sample import Sample as Sample
from mbodied.types.sense.vision import Image as Image
from typing import ClassVar

class BBox2D(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    __match_args__: ClassVar[tuple] = ...
    __orig_bases__: ClassVar[tuple] = ...
    x1: Incomplete
    y1: Incomplete
    x2: Incomplete
    y2: Incomplete
    def __init__(self, _cls, x1: float, y1: float, x2: float, y2: float) -> None:
        """Create new instance of BBox2D(x1, y1, x2, y2)"""
    def __getnewargs__(self):
        """Return self as a plain tuple.  Used by copy and pickle."""

class BBox3D(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    __match_args__: ClassVar[tuple] = ...
    __orig_bases__: ClassVar[tuple] = ...
    x1: Incomplete
    y1: Incomplete
    z1: Incomplete
    x2: Incomplete
    y2: Incomplete
    z2: Incomplete
    def __init__(self, _cls, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float) -> None:
        """Create new instance of BBox3D(x1, y1, z1, x2, y2, z2)"""
    def __getnewargs__(self):
        """Return self as a plain tuple.  Used by copy and pickle."""

class PixelCoords(tuple):
    _fields: ClassVar[tuple] = ...
    _field_defaults: ClassVar[dict] = ...
    __match_args__: ClassVar[tuple] = ...
    __orig_bases__: ClassVar[tuple] = ...
    u: Incomplete
    v: Incomplete
    def __init__(self, _cls, u: int, v: int) -> None:
        """Create new instance of PixelCoords(u, v)"""
    def __getnewargs__(self):
        """Return self as a plain tuple.  Used by copy and pickle."""

class WorldObject(mbodied.types.sample.Sample):
    model_config: ClassVar[dict] = ...
    __class_vars__: ClassVar[set] = ...
    __private_attributes__: ClassVar[dict] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc._abc_data] = ...
    __pydantic_custom_init__: ClassVar[bool] = ...
    __pydantic_post_init__: ClassVar[None] = ...
    __pydantic_decorators__: ClassVar[pydantic._internal._decorators.DecoratorInfos] = ...
    __pydantic_generic_metadata__: ClassVar[dict] = ...
    __pydantic_complete__: ClassVar[bool] = ...
    __pydantic_parent_namespace__: ClassVar[dict] = ...
    model_fields: ClassVar[dict] = ...
    __pydantic_core_schema__: ClassVar[dict] = ...
    __pydantic_validator__: ClassVar[pydantic_core._pydantic_core.SchemaValidator] = ...
    __pydantic_serializer__: ClassVar[pydantic_core._pydantic_core.SchemaSerializer] = ...
    __signature__: ClassVar[inspect.Signature] = ...
    model_computed_fields: ClassVar[dict] = ...

class World(mbodied.types.sample.Sample):
    model_config: ClassVar[dict] = ...
    __class_vars__: ClassVar[set] = ...
    __private_attributes__: ClassVar[dict] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc._abc_data] = ...
    __pydantic_custom_init__: ClassVar[bool] = ...
    __pydantic_post_init__: ClassVar[None] = ...
    __pydantic_decorators__: ClassVar[pydantic._internal._decorators.DecoratorInfos] = ...
    __pydantic_generic_metadata__: ClassVar[dict] = ...
    __pydantic_complete__: ClassVar[bool] = ...
    __pydantic_parent_namespace__: ClassVar[dict] = ...
    model_fields: ClassVar[dict] = ...
    __pydantic_core_schema__: ClassVar[dict] = ...
    __pydantic_validator__: ClassVar[pydantic_core._pydantic_core.SchemaValidator] = ...
    __pydantic_serializer__: ClassVar[pydantic_core._pydantic_core.SchemaSerializer] = ...
    __signature__: ClassVar[inspect.Signature] = ...
    model_computed_fields: ClassVar[dict] = ...
